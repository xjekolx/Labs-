# -*- coding: utf-8 -*-
"""04_data_files_Павшок_Артём_ПИ22-4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vqfyUqcJVYZLkA-NB0Nw1KhhOCn8O2Y3

# Форматы данных (1)

Материалы:
* Макрушин С.В. "Лекция 4: Форматы данных"
* https://docs.python.org/3/library/json.html
* https://docs.python.org/3/library/pickle.html
* https://www.crummy.com/software/BeautifulSoup/bs4/doc.ru/bs4ru.html
* Уэс Маккини. Python и анализ данных

## Задачи для совместного разбора

1. Вывести все адреса электронной почты, содержащиеся в адресной книге `addres-book.json`
"""

import json

with open('addres-book.json', 'r') as f:
    data = json.load(f)

for contact in data:
    email = contact['email']
    print(email)

"""2. Вывести телефоны, содержащиеся в адресной книге `addres-book.json`"""

import json

with open('addres-book.json', 'r') as f:
    data = json.load(f)

for contact in data:
    phones = contact['phones']
    print(phones)

"""**3**. По данным из файла `addres-book-q.xml` сформировать список словарей с телефонами каждого из людей. """

ad_book = BeautifulSoup(open("addres-book-q.xml","r"))
spisok = []
for i in ad_book.find_all("address"):
  name = i.find("name").get_text()
  for j in i.find_all("phone"):
    phone = j.get_text()
    spisok.append({name: phone})
spisok

"""## Лабораторная работа №4

### JSON

1.1 Считайте файл `contributors_sample.json`. Воспользовавшись модулем `json`, преобразуйте содержимое файла в соответствующие объекты python. Выведите на экран информацию о первых 3 пользователях.
"""

import json

with open('contributors_sample.json') as f:
    data = json.load(f)

for user in data[:3]:
    print(f"Username: {user['username']}")
    print(f"Name: {user['name']}")
    print(f"Sex: {user['sex']}")
    print(f"Address: {user['address']}")
    print(f"Mail: {user['mail']}")
    print(f"Jobs: {', '.join(user['jobs'])}")
    print(f"ID: {user['id']}")
    print()

"""1.2 Выведите уникальные почтовые домены, содержащиеся в почтовых адресах людей"""

set(line["mail"].split("@")[1] for line in data)

"""1.3 Напишите функцию, которая по `username` ищет человека и выводит информацию о нем. Если пользователь с заданным `username` отсутствует, возбудите исключение `ValueError`"""

import json

def person_name(username: str):
    for line in data:
        if username in line["username"]:
            return line
    raise ValueError

name = input(":")
try:
    print(person_name(name))
except ValueError:
    print("Пользователь не найден")

"""1.4 Посчитайте, сколько мужчин и женщин присутсвует в этом наборе данных."""

import json

with open('contributors_sample.json') as f:
    data = json.load(f)

male = 0
female = 0

for person in data:
    if person['sex'] == 'M':
        male += 1
    elif person['sex'] == 'F':
        female += 1

print("Количество мужчин: ", male)
print("Количество женщин: ", female)

"""1.5 Создайте `pd.DataFrame` `contributors`, имеющий столбцы `id`, `username` и `sex`."""

contributors = pd.DataFrame(data, columns=['id', 'username', 'sex'])

"""1.6 Загрузите данные из файла `recipes_sample.csv` (__ЛР2__) в таблицу `recipes`. Объедините `recipes` с таблицей `contributors` с сохранением строк в том случае, если информация о человеке отсутствует в JSON-файле. Для скольких человек информация отсутствует? """

import pandas as pd

# загрузка данных из файлов
recipes = pd.read_csv('recipes_sample.csv')
contributors = pd.read_json('contributors_sample.json')

# объединение таблиц
merged = pd.merge(recipes, contributors[['id', 'username']], left_on='contributor_id', right_on='id', how='left')

# подсчет количества строк, в которых информация о человеке отсутствует
missing_count = merged['username'].isna().sum()

print(f'Количество строк, в которых информация о человеке отсутствует: {missing_count}')

"""### pickle

2.1 На основе файла `contributors_sample.json` создайте словарь следующего вида: 
```
{
    должность: [список username людей, занимавших эту должность]
}
```
"""

import json

# Считываем данные из JSON-файла
with open('contributors_sample.json', 'r') as f:
    contributors = json.load(f)

# Создаем словарь
positions = {}
for person in contributors:
    for job in person['jobs']:
        positions.setdefault(job, []).append(person['username'])

# Выводим результаты
for job, users in positions.items():
    print(job + ':', users)

"""2.2 Сохраните результаты в файл `job_people.pickle` и в файл `job_people.json` с использованием форматов pickle и JSON соответственно. Сравните объемы получившихся файлов. При сохранении в JSON укажите аргумент `indent`."""

import pickle

with open('job_people.pickle', 'wb') as pickle_file:
    pickle.dump(positions, pickle_file)

with open('job_people.json', 'w') as json_file:
    json.dump(positions, json_file, indent=4)

"""2.3 Считайте файл `job_people.pickle` и продемонстрируйте, что данные считались корректно. """

import pickle

# Читаем данные из файла job_people.pickle
with open('job_people.pickle', 'rb') as f:
    jobp = pickle.load(f)

# Выводим результаты
for job, users in jobp.items():
    print(job + ':', users)

"""### XML

3.1 По данным файла `steps_sample.xml` сформируйте словарь с шагами по каждому рецепту вида `{id_рецепта: ["шаг1", "шаг2"]}`. Сохраните этот словарь в файл `steps_sample.json`
"""

import xml.etree.ElementTree as ET
import json

# Чтение XML-файла
tree = ET.parse('steps_sample.xml')
root = tree.getroot()

# Создание словаря с шагами по каждому рецепту
steps_dict = {}
for recipe in root.findall('recipe'):
    recipe_id = recipe.find('id').text
    steps = []
    for step in recipe.find('steps').findall('step'):
        steps.append(step.text)
    steps_dict[recipe_id] = steps

# Сохранение словаря в JSON-файл
with open('steps_sample.json', 'w') as f:
    json.dump(steps_dict, f)

"""3.2 По данным файла `steps_sample.xml` сформируйте словарь следующего вида: `кол-во_шагов_в_рецепте: [список_id_рецептов]`"""

steps_count_d = {}

for recipe in root.findall('recipe'):
    recipe_id = recipe.get('id')
    steps_count = len(recipe.findall('step'))
    if steps_count in steps_count_d:
        steps_count_d[steps_count].append(recipe_id)
    else:
        steps_count_d[steps_count] = [recipe_id]

for count, recipe_ids in steps_count_d.items():
    print(str(count) + " шагов:")
    for recipe_id in recipe_ids:
        print("  " + recipe_id)

"""3.3 Получите список рецептов, в этапах выполнения которых есть информация о времени (часы или минуты). Для отбора подходящих рецептов обратите внимание на атрибуты соответствующих тэгов."""

time = []

for recipe in root.findall('recipe'):
    for step in recipe.findall('step'):
        for instruction in step.findall('instruction'):
            if 'час' in instruction.text.lower() or 'минут' in instruction.text.lower():
                time.append(recipe.get('id'))
                break
        else:
            continue
        break

print(time)

"""3.4 Загрузите данные из файла `recipes_sample.csv` (__ЛР2__) в таблицу `recipes`. Для строк, которые содержат пропуски в столбце `n_steps`, заполните этот столбец на основе файла  `steps_sample.xml`. Строки, в которых столбец `n_steps` заполнен, оставьте без изменений."""



"""3.5 Проверьте, содержит ли столбец `n_steps` пропуски. Если нет, то преобразуйте его к целочисленному типу и сохраните результаты в файл `recipes_sample_with_filled_nsteps.csv`"""

